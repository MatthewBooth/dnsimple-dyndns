#!/usr/bin/env node

'use strict'
require('dotenv').config()
const pkg = require('./package.json')
const axios = require('axios').default

const token = process.env.TOKEN
const accountId = parseInt(process.env.ACCOUNT_ID)
const domain = process.env.DOMAIN
const recordId = parseInt(process.env.RECORD_ID)

const client = require('dnsimple')({
  accessToken: token
})

let IP = null

const getIp = async function () {
  await axios.get('https://api.ipify.org?format=json')
    .then(response => {
      IP = response.data.ip
    }).catch(error => {
      handleError(error, { quiet: false })
      IP = null
    })
}

const handleError = (error, options) => {
  if (!options.quiet) {
    console.log(error)
  }
  process.exit(1)
}

const program = require('commander')

program
  .version(pkg.version)

program
  .command('show')
  .description('Show current configuration')
  .action(async (options) => {
    if (isNaN(recordId)) {
      handleError('Error: A Record ID is required to use the update command. Please run "dnsimple-dyndns new" first', options)
    }

    client.zones.getZoneRecord(accountId, domain, recordId).then(response => {
      console.log(response.data)
    }, error => {
      handleError(error, options)
    })
  })

program
  .command('new [subdomain]')
  .description('Create a new subdomain and record with your current IP')
  .action(async (sub, options) => {
    if (sub === undefined) {
      handleError('Error: A Subdomain is required. Please try "dnsimple-dyndns new example"', options)
    }

    await getIp()

    if (IP === null) {
      handleError('Error: Your IP was not resolved correctly"', options)
    }

    const attributes = {
      name: sub,
      type: 'A',
      ttl: 3600,
      content: IP
    }

    client.zones.createZoneRecord(accountId, domain, attributes).then(response => {
      console.log(response.data)
      console.log('Success!')
      console.log('Please add %s to your .env file', `RECORD_ID=${response.data.id}`)
    }, error => {
      handleError(error, options)
    })
  })

program
  .command('update')
  .description('Update the configured record with your current IP')
  .option('-q, --quiet', 'Update silently. No success or error messages will be printed')
  .action(async function (options) {
    if (isNaN(recordId)) {
      handleError('Error: A Record ID is required to use the update command. Please run "dnsimple-dyndns new" first', options)
    }
    await getIp()

    if (IP === null) {
      handleError('Error: Your IP was not resolved correctly"', options)
    }

    client.zones.updateZoneRecord(accountId, domain, recordId, { content: IP, ttl: 3600 }).then(
      response => {
        if (!options.quiet) {
          console.log(response.data)
          console.log('Success! The record was updated')
        }
      }, error => handleError(error, options))
  })

program.parse(process.argv)

if (!process.argv.slice(2).length) {
  program.outputHelp();
}


